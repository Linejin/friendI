#!/bin/bash
# Î¨¥Ï§ëÎã® Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏ (Zero-Downtime Deployment)

set -e

# ÏÉâÏÉÅ Ï†ïÏùò
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_banner() {
    echo -e "${BLUE}"
    echo "=================================================="
    echo "    üöÄ FriendlyI Î¨¥Ï§ëÎã® Î∞∞Ìè¨ (Zero-Downtime)"
    echo "    üì¶ Í∏∞Ï°¥ ÏÑúÎπÑÏä§ Í∞êÏßÄ Î∞è ÏïàÏ†ÑÌïú ÏóÖÎç∞Ïù¥Ìä∏"
    echo "=================================================="
    echo -e "${NC}"
}

# Í∏∞Ï°¥ ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏
check_existing_services() {
    log_info "Í∏∞Ï°¥ ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë..."
    
    # Docker Compose ÏÑúÎπÑÏä§ ÌôïÏù∏
    EXISTING_SERVICES=$(docker-compose ps --services 2>/dev/null || echo "")
    RUNNING_SERVICES=$(docker-compose ps --filter status=running --services 2>/dev/null || echo "")
    
    # Í∞úÎ≥Ñ PostgreSQL Ïª®ÌÖåÏù¥ÎÑà ÌôïÏù∏
    POSTGRES_CONTAINERS=$(docker ps --filter "name=postgres" --filter "status=running" --format "{{.Names}}" 2>/dev/null || echo "")
    
    # Ìè¨Ìä∏ ÏÇ¨Ïö© ÌôïÏù∏
    PORT_5432=$(netstat -tlnp 2>/dev/null | grep ":5432" || echo "")
    PORT_5433=$(netstat -tlnp 2>/dev/null | grep ":5433" || echo "")
    PORT_8080=$(netstat -tlnp 2>/dev/null | grep ":8080" || echo "")
    PORT_80=$(netstat -tlnp 2>/dev/null | grep ":80" || echo "")
    
    echo "üîç Í∏∞Ï°¥ ÏÑúÎπÑÏä§ ÏÉÅÌÉú:"
    echo "  - Docker Compose ÏÑúÎπÑÏä§: $EXISTING_SERVICES"
    echo "  - Ïã§Ìñâ Ï§ëÏù∏ ÏÑúÎπÑÏä§: $RUNNING_SERVICES"
    echo "  - PostgreSQL Ïª®ÌÖåÏù¥ÎÑà: $POSTGRES_CONTAINERS"
    echo "  - Ìè¨Ìä∏ 5432 ÏÇ¨Ïö©: $([ -n "$PORT_5432" ] && echo "ÏÇ¨Ïö© Ï§ë" || echo "ÏÇ¨Ïö© Í∞ÄÎä•")"
    echo "  - Ìè¨Ìä∏ 5433 ÏÇ¨Ïö©: $([ -n "$PORT_5433" ] && echo "ÏÇ¨Ïö© Ï§ë" || echo "ÏÇ¨Ïö© Í∞ÄÎä•")"
    echo "  - Ìè¨Ìä∏ 8080 ÏÇ¨Ïö©: $([ -n "$PORT_8080" ] && echo "ÏÇ¨Ïö© Ï§ë" || echo "ÏÇ¨Ïö© Í∞ÄÎä•")"
    echo "  - Ìè¨Ìä∏ 80 ÏÇ¨Ïö©: $([ -n "$PORT_80" ] && echo "ÏÇ¨Ïö© Ï§ë" || echo "ÏÇ¨Ïö© Í∞ÄÎä•")"
    
    # Ï†ÑÏó≠ Î≥ÄÏàò ÏÑ§Ï†ï
    HAS_EXISTING_POSTGRES=$([ -n "$POSTGRES_CONTAINERS" ] && echo "true" || echo "false")
    HAS_RUNNING_SERVICES=$([ -n "$RUNNING_SERVICES" ] && echo "true" || echo "false")
}

# Îç∞Ïù¥ÌÑ∞ Î∞±ÏóÖ
backup_data() {
    if [ "$HAS_EXISTING_POSTGRES" = "true" ]; then
        log_info "PostgreSQL Îç∞Ïù¥ÌÑ∞ Î∞±ÏóÖ Ï§ë..."
        
        BACKUP_DIR="./backups/$(date +%Y%m%d_%H%M%S)"
        mkdir -p "$BACKUP_DIR"
        
        # Ïã§Ìñâ Ï§ëÏù∏ PostgreSQLÏóêÏÑú Î∞±ÏóÖ
        for container in $POSTGRES_CONTAINERS; do
            log_info "Ïª®ÌÖåÏù¥ÎÑà $containerÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î∞±ÏóÖ Ï§ë..."
            docker exec "$container" pg_dumpall -U postgres > "$BACKUP_DIR/${container}_backup.sql" 2>/dev/null || \
            docker exec "$container" pg_dumpall -U friendlyi_user > "$BACKUP_DIR/${container}_backup.sql" 2>/dev/null || \
            log_warning "Ïª®ÌÖåÏù¥ÎÑà $container Î∞±ÏóÖ Ïã§Ìå® (Í∂åÌïú Î¨∏Ï†úÏùº Ïàò ÏûàÏùå)"
        done
        
        # Docker Î≥ºÎ•® Î∞±ÏóÖ
        if docker volume ls | grep -q postgres; then
            log_info "PostgreSQL Î≥ºÎ•® Î∞±ÏóÖ Ï§ë..."
            docker run --rm -v postgres_data:/data -v "$(pwd)/$BACKUP_DIR":/backup alpine tar czf /backup/postgres_volume_backup.tar.gz -C /data . 2>/dev/null || \
            log_warning "Î≥ºÎ•® Î∞±ÏóÖ Ïã§Ìå®"
        fi
        
        log_success "Î∞±ÏóÖ ÏôÑÎ£å: $BACKUP_DIR"
    else
        log_info "Î∞±ÏóÖÌï† Í∏∞Ï°¥ PostgreSQL Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§."
    fi
}

# Î¨¥Ï§ëÎã® ÏóÖÎç∞Ïù¥Ìä∏ Ï†ÑÎûµ
zero_downtime_update() {
    log_info "Î¨¥Ï§ëÎã® ÏóÖÎç∞Ïù¥Ìä∏ Ï†ÑÎûµ Ïã§Ìñâ Ï§ë..."
    
    if [ "$HAS_RUNNING_SERVICES" = "true" ]; then
        log_info "Í∏∞Ï°¥ ÏÑúÎπÑÏä§Í∞Ä Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§. Îã®Í≥ÑÏ†Å ÏóÖÎç∞Ïù¥Ìä∏Î•º ÏàòÌñâÌï©ÎãàÎã§."
        
        # 1Îã®Í≥Ñ: Frontend Î®ºÏ†Ä ÏóÖÎç∞Ïù¥Ìä∏ (Îçî Îπ†Î¶Ñ)
        if echo "$RUNNING_SERVICES" | grep -q "frontend"; then
            log_info "1Îã®Í≥Ñ: Frontend ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë..."
            docker-compose up -d --no-deps frontend
            
            # Frontend Ìó¨Ïä§Ï≤¥ÌÅ¨
            sleep 15
            if curl -f http://localhost:80 >/dev/null 2>&1 || curl -f http://localhost:3000 >/dev/null 2>&1; then
                log_success "‚úÖ Frontend ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å"
            else
                log_warning "‚ö†Ô∏è Frontend Ìó¨Ïä§Ï≤¥ÌÅ¨ Ïã§Ìå®"
            fi
        fi
        
        # 2Îã®Í≥Ñ: Backend ÏóÖÎç∞Ïù¥Ìä∏
        if echo "$RUNNING_SERVICES" | grep -q "backend"; then
            log_info "2Îã®Í≥Ñ: Backend ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë..."
            docker-compose up -d --no-deps backend
            
            # Backend Ìó¨Ïä§Ï≤¥ÌÅ¨
            sleep 30
            if curl -f http://localhost:8080/actuator/health >/dev/null 2>&1; then
                log_success "‚úÖ Backend ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å"
            else
                log_warning "‚ö†Ô∏è Backend Ìó¨Ïä§Ï≤¥ÌÅ¨ Ïã§Ìå®"
            fi
        fi
        
        # 3Îã®Í≥Ñ: Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏ (Í∞ÄÏû• Ïã†Ï§ëÌïòÍ≤å)
        if echo "$RUNNING_SERVICES" | grep -q "postgres" || [ "$HAS_EXISTING_POSTGRES" = "true" ]; then
            log_info "3Îã®Í≥Ñ: PostgreSQL ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë..."
            
            # Í∏∞Ï°¥ PostgreSQL ÏÑ§Ï†ï ÌôïÏù∏
            EXISTING_DB_VERSION=$(docker exec ${POSTGRES_CONTAINERS%% *} psql -U postgres -c "SELECT version();" 2>/dev/null | grep PostgreSQL || echo "ÌôïÏù∏ Î∂àÍ∞Ä")
            log_info "Í∏∞Ï°¥ DB Î≤ÑÏ†Ñ: $EXISTING_DB_VERSION"
            
            # Ìè¨Ìä∏ Ï∂©Îèå Î∞©ÏßÄ
            if [ -n "$PORT_5432" ]; then
                log_warning "5432 Ìè¨Ìä∏Í∞Ä ÏÇ¨Ïö© Ï§ëÏûÖÎãàÎã§. 5433 Ìè¨Ìä∏Î•º ÏÇ¨Ïö©Ìï©ÎãàÎã§."
                sed -i 's/5432:5432/5433:5432/g' docker-compose.yml 2>/dev/null || true
            fi
            
            # PostgreSQL Ï†êÏßÑÏ†Å ÏóÖÎç∞Ïù¥Ìä∏
            docker-compose up -d --no-deps postgres
            
            # PostgreSQL ÏãúÏûë ÎåÄÍ∏∞
            log_info "PostgreSQL ÏãúÏûë ÎåÄÍ∏∞ Ï§ë... (60Ï¥à)"
            sleep 60
            
            # PostgreSQL Ìó¨Ïä§Ï≤¥ÌÅ¨
            if docker-compose ps postgres | grep -q "healthy"; then
                log_success "‚úÖ PostgreSQL ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å"
            else
                log_error "‚ùå PostgreSQL ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®"
                return 1
            fi
        fi
        
        # 4Îã®Í≥Ñ: Redis ÏóÖÎç∞Ïù¥Ìä∏
        if echo "$RUNNING_SERVICES" | grep -q "redis"; then
            log_info "4Îã®Í≥Ñ: Redis ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë..."
            docker-compose up -d --no-deps redis
            
            sleep 10
            if docker-compose ps redis | grep -q "healthy"; then
                log_success "‚úÖ Redis ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å"
            else
                log_warning "‚ö†Ô∏è Redis Ìó¨Ïä§Ï≤¥ÌÅ¨ Ïã§Ìå®"
            fi
        fi
        
    else
        log_info "Í∏∞Ï°¥ ÏÑúÎπÑÏä§Í∞Ä ÏóÜÏäµÎãàÎã§. Ï†ÑÏ≤¥ Ïä§ÌÉùÏùÑ ÏÉàÎ°ú ÏãúÏûëÌï©ÎãàÎã§."
        
        # Ìè¨Ìä∏ Ï∂©Îèå Î∞©ÏßÄ
        if [ -n "$PORT_5432" ]; then
            log_warning "5432 Ìè¨Ìä∏Í∞Ä ÏÇ¨Ïö© Ï§ëÏûÖÎãàÎã§. 5433 Ìè¨Ìä∏Î•º ÏÇ¨Ïö©Ìï©ÎãàÎã§."
            sed -i 's/5432:5432/5433:5432/g' docker-compose.yml 2>/dev/null || true
        fi
        
        # Ï†ÑÏ≤¥ Ïä§ÌÉù ÏãúÏûë
        docker-compose up -d
    fi
}

# ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏ Î∞è Î°§Î∞± Ï§ÄÎπÑ
verify_deployment() {
    log_info "Î∞∞Ìè¨ ÏÉÅÌÉú Í≤ÄÏ¶ù Ï§ë..."
    
    # 60Ï¥à ÎåÄÍ∏∞
    log_info "ÏÑúÎπÑÏä§ ÏïàÏ†ïÌôî ÎåÄÍ∏∞ Ï§ë... (60Ï¥à)"
    sleep 60
    
    # Í∞Å ÏÑúÎπÑÏä§ Ìó¨Ïä§Ï≤¥ÌÅ¨
    HEALTH_STATUS=""
    
    # PostgreSQL Ï≤¥ÌÅ¨
    if docker-compose ps postgres | grep -q "healthy"; then
        HEALTH_STATUS="$HEALTH_STATUS‚úÖ PostgreSQL: Ï†ïÏÉÅ\n"
    else
        HEALTH_STATUS="$HEALTH_STATUS‚ùå PostgreSQL: ÎπÑÏ†ïÏÉÅ\n"
        DEPLOYMENT_FAILED=true
    fi
    
    # Redis Ï≤¥ÌÅ¨
    if docker-compose ps redis | grep -q "healthy"; then
        HEALTH_STATUS="$HEALTH_STATUS‚úÖ Redis: Ï†ïÏÉÅ\n"
    else
        HEALTH_STATUS="$HEALTH_STATUS‚ùå Redis: ÎπÑÏ†ïÏÉÅ\n"
        DEPLOYMENT_FAILED=true
    fi
    
    # Backend Ï≤¥ÌÅ¨
    if curl -f http://localhost:8080/actuator/health >/dev/null 2>&1; then
        HEALTH_STATUS="$HEALTH_STATUS‚úÖ Backend: Ï†ïÏÉÅ\n"
    else
        HEALTH_STATUS="$HEALTH_STATUS‚ùå Backend: ÎπÑÏ†ïÏÉÅ\n"
        DEPLOYMENT_FAILED=true
    fi
    
    # Frontend Ï≤¥ÌÅ¨
    if curl -f http://localhost:80 >/dev/null 2>&1 || curl -f http://localhost:3000 >/dev/null 2>&1; then
        HEALTH_STATUS="$HEALTH_STATUS‚úÖ Frontend: Ï†ïÏÉÅ\n"
    else
        HEALTH_STATUS="$HEALTH_STATUS‚ùå Frontend: ÎπÑÏ†ïÏÉÅ\n"
        DEPLOYMENT_FAILED=true
    fi
    
    echo -e "\nüìä Î∞∞Ìè¨ Í≤∞Í≥º:"
    echo -e "$HEALTH_STATUS"
    
    if [ "$DEPLOYMENT_FAILED" = "true" ]; then
        log_error "‚ùå Î∞∞Ìè¨Ïóê Ïã§Ìå®Ìïú ÏÑúÎπÑÏä§Í∞Ä ÏûàÏäµÎãàÎã§."
        
        echo -n "Î°§Î∞±ÏùÑ ÏàòÌñâÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): "
        read -r ROLLBACK_CHOICE
        
        if [ "$ROLLBACK_CHOICE" = "y" ] || [ "$ROLLBACK_CHOICE" = "Y" ]; then
            perform_rollback
        fi
        
        return 1
    else
        log_success "üéâ Î™®Îì† ÏÑúÎπÑÏä§Í∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Î∞∞Ìè¨ÎêòÏóàÏäµÎãàÎã§!"
        return 0
    fi
}

# Î°§Î∞± ÏàòÌñâ
perform_rollback() {
    log_warning "üîÑ Î°§Î∞±ÏùÑ ÏàòÌñâÌï©ÎãàÎã§..."
    
    # ÏµúÍ∑º Î∞±ÏóÖ Ï∞æÍ∏∞
    LATEST_BACKUP=$(ls -t ./backups/ 2>/dev/null | head -1)
    
    if [ -n "$LATEST_BACKUP" ] && [ -d "./backups/$LATEST_BACKUP" ]; then
        log_info "Î∞±ÏóÖÏóêÏÑú Î≥µÏõê Ï§ë: $LATEST_BACKUP"
        
        # PostgreSQL Îç∞Ïù¥ÌÑ∞ Î≥µÏõê
        if [ -f "./backups/$LATEST_BACKUP"/*_backup.sql ]; then
            BACKUP_FILE=$(ls "./backups/$LATEST_BACKUP"/*_backup.sql | head -1)
            docker exec -i $(docker-compose ps -q postgres) psql -U postgres < "$BACKUP_FILE" 2>/dev/null || \
            log_warning "Îç∞Ïù¥ÌÑ∞ Î≥µÏõê Ïã§Ìå®"
        fi
        
        log_success "Î°§Î∞± ÏôÑÎ£å"
    else
        log_warning "Î∞±ÏóÖÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏñ¥ Î°§Î∞±Ìï† Ïàò ÏóÜÏäµÎãàÎã§."
    fi
}

# Î∞∞Ìè¨ ÌõÑ Ï†ïÎ≥¥ ÌëúÏãú
show_deployment_info() {
    echo
    log_success "üöÄ Î¨¥Ï§ëÎã® Î∞∞Ìè¨ ÏôÑÎ£å!"
    
    # Ïã§Ï†ú Ï†ëÏÜç Ï†ïÎ≥¥
    PUBLIC_IP=$(curl -s ifconfig.me 2>/dev/null || curl -s ipinfo.io/ip 2>/dev/null || echo "IPÌôïÏù∏Ïã§Ìå®")
    
    echo "üìã ÏÑúÎπÑÏä§ Ï†ëÏÜç Ï†ïÎ≥¥:"
    echo "   üåê Frontend: http://$PUBLIC_IP/"
    echo "   üîß Backend API: http://$PUBLIC_IP:8080"
    echo "   üìä API Î¨∏ÏÑú: http://$PUBLIC_IP:8080/swagger-ui.html"
    echo "   üíæ Ìó¨Ïä§Ï≤¥ÌÅ¨: http://$PUBLIC_IP:8080/actuator/health"
    
    echo
    echo "üìä ÌòÑÏû¨ Ïã§Ìñâ Ï§ëÏù∏ ÏÑúÎπÑÏä§:"
    docker-compose ps
    
    echo
    echo "üõ†Ô∏è Í¥ÄÎ¶¨ Î™ÖÎ†πÏñ¥:"
    echo "   Ï†ÑÏ≤¥ Î°úÍ∑∏: docker-compose logs -f"
    echo "   ÏÑúÎπÑÏä§ Ïû¨ÏãúÏûë: docker-compose restart [service-name]"
    echo "   ÏÑúÎπÑÏä§ Ï§ëÏßÄ: docker-compose down"
    echo "   ÏÉÅÌÉú ÌôïÏù∏: docker-compose ps"
}

# Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò
main() {
    print_banner
    
    check_existing_services
    backup_data
    zero_downtime_update
    
    if verify_deployment; then
        show_deployment_info
        log_success "‚úÖ Î¨¥Ï§ëÎã® Î∞∞Ìè¨Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!"
    else
        log_error "‚ùå Î∞∞Ìè¨ Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
        exit 1
    fi
}

# Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
main "$@"