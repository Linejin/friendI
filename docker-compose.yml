# Docker Compose for FriendlyI Full Stack Production Deployment
# Complete stack: PostgreSQL + Redis + Backend + Frontend
# Optimized for EC2 deployment

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: friendlyi-postgres
    ports:
      - "5433:5432"  # 외부 5432 충돌 방지
    environment:
      POSTGRES_DB: friendlyi
      POSTGRES_USER: friendlyi_user
      POSTGRES_PASSWORD: friendlyi_password123
      TZ: Asia/Seoul
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - friendlyi-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U friendlyi_user -d friendlyi"]
      interval: 30s
      timeout: 5s
      retries: 5
    command: |
      postgres -c max_connections=100
               -c shared_buffers=128MB
               -c effective_cache_size=256MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.9
               -c wal_buffers=16MB
               -c default_statistics_target=100

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: friendlyi-redis
    ports:
      - "6379:6379"
    environment:
      TZ: Asia/Seoul
    volumes:
      - redis_data:/data
    networks:
      - friendlyi-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    command: redis-server --appendonly yes --requirepass "redis_password123" --maxmemory 200mb --maxmemory-policy allkeys-lru

  # Backend Service
  backend:
    build:
      context: ./backend/backend
      dockerfile: Dockerfile
    container_name: friendlyi-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Xmx1g -Xms512m -XX:+UseG1GC -XX:+UseContainerSupport
      - TZ=Asia/Seoul
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=friendlyi
      - DB_USERNAME=friendlyi_user
      - DB_PASSWORD=friendlyi_password123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password123
    volumes:
      - backend_data:/app/data
      - ./logs:/app/logs
    networks:
      - friendlyi-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:8080
        - REACT_APP_ENV=production
    container_name: friendlyi-frontend
    ports:
      - "80:80"
      - "443:443"  # HTTPS 지원
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - friendlyi-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  friendlyi-network:
    driver: bridge
    name: friendlyi-network

volumes:
  postgres_data:
    driver: local
    name: friendlyi-postgres-data
  redis_data:
    driver: local
    name: friendlyi-redis-data
  backend_data:
    driver: local
    name: friendlyi-backend-data