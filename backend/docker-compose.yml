version: '3.8'

services:
  # Database Service
  postgres:
    image: postgres:15-alpine
    container_name: friendly-i-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: friendlyi
      POSTGRES_USER: friendlyi_user
      POSTGRES_PASSWORD: friendlyi_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - friendly-i-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U friendlyi_user -d friendlyi"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Service (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: friendly-i-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - friendly-i-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: friendly-i-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Spring Profile
      SPRING_PROFILES_ACTIVE: prod
      
      # Server Configuration
      SERVER_PORT: 8080
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: friendlyi
      DB_USERNAME: friendlyi_user
      DB_PASSWORD: friendlyi_password
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
      
      # JWT Configuration
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production-minimum-32-chars
      JWT_EXPIRATION: 86400000
      JWT_REFRESH_EXPIRATION: 604800000
      
      # File Upload Configuration
      FILE_UPLOAD_PATH: /app/uploads
      FILE_UPLOAD_MAX_SIZE: 10MB
      FILE_UPLOAD_MAX_REQUEST_SIZE: 20MB
      
      # JVM Options (EC2 small optimized)
      JAVA_OPTS: "-Xms128m -Xmx512m -XX:+UseSerialGC -XX:+UseContainerSupport -XX:MaxRAMPercentage=50.0 -Djava.awt.headless=true"
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "8080:8080"
    networks:
      - friendly-i-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: friendly-i-nginx
    restart: unless-stopped
    depends_on:
      - backend
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - friendly-i-network

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

# Networks
networks:
  friendly-i-network:
    driver: bridge
    name: friendly-i-network